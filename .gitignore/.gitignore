#include <opencv2/opencv.hpp>
#include <iostream>
#include<TCHAR.H> 
#include<windows.h>
using namespace std;
using namespace cv;

Rect roi;
void processFrame(Mat &binary, Rect &rect);

HANDLE Serial_open(LPCWSTR, int);
int Serial_read(HANDLE, void*, int);
int Serial_write(HANDLE, const void*, int);
void Serial_close(HANDLE);
void clear_buf(unsigned char*, int);
HANDLE hCom;
void get_num(Mat pic, Rect rect);
void DrawFire(Mat &inputImg, Mat foreImg);
Mat CheckColor(Mat &inImg);

int cpt;
float num;
int  l_1, r_1;
char bridge[] = "000000000\r\n";
char bridge2[] = "123456789\r\n";

char  buff2[] = { '0','1','2','3','4','5','6','7','8','9' };
Mat frame, mask, mask1, mask2;



int main(int argc, char* argv) {
	VideoCapture capture(0);
	Mat kernel1 = getStructuringElement(MORPH_ELLIPSE, Size(3, 3), Point(-1, -1));
	Mat kernel2 = getStructuringElement(MORPH_ELLIPSE, Size(3, 3), Point(-1, -1));
	Mat kernel3 = getStructuringElement(MORPH_ELLIPSE, Size(80, 80), Point(-1, -1));//椭圆形的是最好用的。
	string filepath = "D:\\Documents\\Visual Studio 2015\\Projects\\video-fire\\6.png";
	Mat inputImg = imread(filepath, 1);

	char huiche[] = "\n";
	namedWindow("input video", CV_WINDOW_AUTOSIZE);
	//namedWindow("第一次处理", CV_WINDOW_AUTOSIZE);
	//namedWindow("曝光的物体", CV_WINDOW_AUTOSIZE);
	//namedWindow("最终的视频", CV_WINDOW_AUTOSIZE);


	//--open serial port as a default baudrate 9600  
	hCom = Serial_open(_T("COM4"), 115200);
	//--Clear receive memory  
	PurgeComm(hCom, PURGE_RXCLEAR);//清空缓存
								   //Serial_read(hCom,&data,1);
								   //Serial_close(hCom);
	while (1)
	{
		capture >> frame;
		mask=CheckColor(frame);
    	processFrame(mask, roi); // 轮廓发现与位置标定
		get_num(mask, roi);
		Serial_write(hCom, &bridge, 13);
	    rectangle(frame, roi, Scalar(0, 0, 255), 3, 8, 0);
		imshow("input video", frame);
		char c = waitKey(100);
		if (c == 27) 
		{
			break;
		}
	}

	capture.release();
	waitKey(0);
	return 0;
}

void processFrame(Mat &binary, Rect &rect) {
	vector<vector<Point>> contours;
	vector<Vec4i> hireachy;
	findContours(binary, contours, hireachy, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE, Point(0, 0));
	if (contours.size() > 0) {
		double maxArea = 0.0;
		for (size_t t = 0; t < contours.size(); t++) {
			double area = contourArea(contours[static_cast<int>(t)]);
			if (area > maxArea) {
				maxArea = area;
				rect = boundingRect(contours[static_cast<int>(t)]);
			}
		}
	}
	else {
		rect.x = rect.y = rect.width = rect.height = 0;
	}

}

HANDLE Serial_open(LPCWSTR COMx, int BaudRate)
{
	HANDLE hCom;
	DCB dcb = { 0 };
	hCom = CreateFile(COMx,
		GENERIC_READ | GENERIC_WRITE,
		0,
		0,
		OPEN_EXISTING,
		0,//FILE_FLAG_OVERLAPPED,   //同步方式 或 重叠方式 
		0
	);
	if (hCom == INVALID_HANDLE_VALUE)
	{
		DWORD dwError = GetLastError();
		printf("Sorry, failed to open the serial\n");
		//return -1;
		printf("The program will terminate in 3 seconds\n");
		Sleep(3000);
		exit(0);
	}
	else
		printf("The serial is successfully opened in a Baudrate %d!\n", BaudRate);

	dcb.DCBlength = sizeof(DCB);
	if (!GetCommState(hCom, &dcb))
	{
		DWORD dwError = GetLastError();
		return(HANDLE)(-1);
	}
	dcb.BaudRate = BaudRate;   //波特率--等待设置
	dcb.ByteSize = 8;          //位数 
	dcb.Parity = NOPARITY;     //奇偶检验 
	dcb.StopBits = ONESTOPBIT;  //停止位数 
	if (!SetCommState(hCom, &dcb))
	{
		DWORD dwError = GetLastError();
		return(HANDLE)(-1);
	}
	if (!PurgeComm(hCom, PURGE_RXCLEAR))   return(HANDLE)(-1);

	SetupComm(hCom, 1024, 1024);
	return hCom;;
}



/**
serial read
@param Buf:data buf
@param size:
@return The len of read
*/
int Serial_read(HANDLE hCom, void*OutBuf, int size)
{
	DWORD cnt = 0;
	ReadFile(hCom, OutBuf, size, &cnt, 0);
	return cnt;

}

/**
serial write
@param Buf:data buf
@param size:bytes of Buf
@return The len of writen
*/


int Serial_write(HANDLE hCom, const void*Buf, int size)
{
	DWORD dw;
	WriteFile(hCom, Buf, size, &dw, NULL);
	return dw;
}

/**
serial close
*/
void Serial_close(HANDLE hCom)
{
	CloseHandle(hCom);
}

/**
clear buf
*/
void clear_buf(unsigned char*buf, int N)
{
	int i;
	for (i = 0; i <N; i++)buf[i] = 0;
	buf[i] = '\0';
}

//矩形中心点  
void get_num(Mat pic, Rect rect)
{
	int l_2, l_3, l_4;
	int r_2, r_3, r_4;
	int c_2, c_3, c_4;
	cpt = pic.cols;
	l_1 = rect.tl().x;//左极点
	r_1 = rect.br().x;//右极点
					  //printf("    %d----%d-----%d   \n", l_1, r_1, cpt);
	r_1 = cpt - r_1;
	if (r_1 == cpt)r_1 = 0;
	num = (float)l_1 / r_1;
	printf("    %d----%d-----%d-----%f   \n", l_1, r_1, cpt, num);
	l_2 = l_1 / 100;
	l_3 = (l_1 % 100) / 10;
	l_4 = l_1 % 10;

	r_2 = r_1 / 100;
	r_3 = (r_1 % 100) / 10;
	r_4 = r_1 % 10;

	c_2 = cpt / 100;
	c_3 = (cpt % 100) / 10;
	c_4 = cpt % 10;
	printf("    %d----%d-----%d\n", l_2, l_3, l_4);
	printf("    %d----%d-----%d\n", r_2, r_3, r_4);
	printf("    %d----%d-----%d\n", c_2, c_3, c_4);
	bridge[0] = buff2[l_2];
	bridge[1] = buff2[l_3];
	bridge[2] = buff2[l_4];
	bridge[3] = buff2[r_2];
	bridge[4] = buff2[r_3];
	bridge[5] = buff2[r_4];
	bridge[6] = buff2[c_2];
	bridge[7] = buff2[c_3];
	bridge[8] = buff2[c_4];
	printf("%s\n", bridge);
}


Mat CheckColor(Mat &inImg)
{
	Mat fireImg;
	fireImg.create(inImg.size(), CV_8UC1);
	int redThre = 115; // 115~135
	int saturationTh = 45; //55~65
	Mat multiRGB[3];
	int a = inImg.channels();
	split(inImg, multiRGB); //将图片拆分成R,G,B,三通道的颜色
	for (int i = 0; i < inImg.rows; i++)
	{
		for (int j = 0; j < inImg.cols; j++)
		{
			float B, G, R;
			B = multiRGB[0].at<uchar>(i, j); //每个像素的R,G,B值
			G = multiRGB[1].at<uchar>(i, j);
			R = multiRGB[2].at<uchar>(i, j);
			/*B = inImg.at<uchar>(i,inImg.channels()*j + 0); //另一种调用图片中像素RGB值的方法
			G = inImg.at<uchar>(i,inImg.channels()*j + 1);
			R = inImg.at<uchar>(i,inImg.channels()*j + 2);*/
			int maxValue = max(max(B, G), R);
			int minValue = min(min(B, G), R);
			double S = (1 - 3.0*minValue / (R + G + B));
			//R > RT  R>=G>=B  S>=((255-R)*ST/RT)
			if (R > redThre && R >= G && G >= B && S >0.20 && S >((255 - R) * saturationTh / redThre))
			{
				fireImg.at<uchar>(i, j) = 255;
			}
			else
			{
				fireImg.at<uchar>(i, j) = 0;
			}}}
	dilate(fireImg, fireImg, Mat(10, 10, CV_8UC1));
	imshow("fire", fireImg);	//waitKey(0);//DrawFire(inImg, fireImg);
	return fireImg;
}

void DrawFire(Mat &inputImg, Mat foreImg)
{
	vector<vector<Point>> contours_set;//保存轮廓提取后的点集及拓扑关系
	findContours(foreImg, contours_set, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_NONE);
	Mat result0;
	Scalar holeColor;
	Scalar externalColor;

	vector<vector<Point> >::iterator iter = contours_set.begin();
	for (; iter != contours_set.end(); )
	{
		Rect rect = boundingRect(*iter);
		float radius;
		Point2f center;
		minEnclosingCircle(*iter, center, radius);

		if (rect.area()> 0)
		{

			rectangle(inputImg, rect, Scalar(0, 255, 0));
			++iter;

		}
		else
		{
			iter = contours_set.erase(iter);
		}
	}

	imshow("showFire", inputImg);
	//waitKey(0);
}
